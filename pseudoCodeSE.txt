models.py:

class Profile(models.Model):
    user = models.ForeignKey(User, default=1)
    name = models.CharField(max_length=250)
    age = models.CharField(max_length=500)
    gender = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    rating = models.IntField(default = NULL)
    money = models.FloatField(default = 10000)


    def __str__(self):
        return self.name + ' - ' + self.email


class Job(models.Model):
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE)
    job_title = models.CharField(max_length=250)
    job_description = models.CharField(max_length=800)
    is_complete = models.BooleanField(default=False)

    def __str__(self):
        return self.job
        
//helps superuser handle money
class MoneySystem(models.Model):
	job = models.ForeignKey(Job)
	money = models.FloatField(default = 0)


views.py:

def create_Profile(request):
	if not request.user.is_authenticated():
		return render login.html
	else:
		form = ProfileForm()
		if (form.is_valid()):
			get_user_info()// get username, email, gender, etc...
			return render profile_page.html
	return render create_profile.html


def create_job(request, profile_id):
	job = JobForm()
	profile = get_object_or_404(Profile, pk=profile_id)
	if form.is_valid():
		get_job_info()// get job info and descriptions
		job = form.save()
		job.profile = profile
		return render profile_page.html
	return render create_job.html


def delete_job(request, job_id):
    profile = get_object_or_404(Profile, pk=profile_id)
    job = Job.objects.get(pk=job_id)
    job.delete()
    return render profile.html

def profile(request, album_id):
    if not request.user.is_authenticated():
        return render login.html
    else:
    	return profile.html

//home page where all the job postings are listed
def index(request):
    if not request.user.is_authenticated():
        return render login.html
    else:
    	return index.html //homepage


def logout_user(request):
    logout(request)
    form = UserForm()
    return render login.html


def login_user(request):
	if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                return render index.html
            else:
                return render login.html with error_message
        else:
            return render login.html with 'Invalid login' msg
    return render login.html


def register(request):
    form = UserForm(request.POST or None)
    if form.is_valid():
        user = form.save(commit=False)
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']
        user.set_password(password)
        user.save()
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                return index.html //main page
    return render register.html


def bid(request):
	form = BidFrom()
	if form.is_valid():
		saveBid()
		return render index.html
	return render bid.html

def pick_dev(request):
	form = PickDevForm()
	if form.is_valid():
		saveDev()
		return render index.html
	return pick_dev.html
		
//have rating and comment section
def rate_project(request):
	form = RateProjectForm()
	if form.is_valid():
		saveProjectRating()
		return render index.html
	return render rate_project.html
	
//similar to rate_project()
def rate_client(request):
	form = RateDevForm()
	if form.is_valid():
		saveClientRating()
		return render index.html
	return render rate_client.html

//repeal a rating to super user
def repeal_to_superuser(request):
	form = RepealForm()
	if form.is_valid():
		saveRepeal()
		return render index.html
	return render repeal.html

//can write to other members or super users
def write_message(request):
	form = MessageForm()
	if form.is_valid():
		SaveMessage():
		return render index.html
	return render message.html




